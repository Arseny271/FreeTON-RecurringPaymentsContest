.macro constructor
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
PUSHINT 1
SETGLOB 6
;; end constructor protection
; Decode input parameters
; Decode root_public_key_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode root_owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: root_public_key_
;; param: root_owner_address_
; constructor RootTokenContract
;; push identifier root_public_key_
PUSH S1
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier root_owner_address_
	DUP
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier root_public_key_
	PUSH S1
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member value
		;; push identifier root_owner_address_
		DUP
		PARSEMSGADDR
		INDEX 3
		PLDU 256
		NEQINT 0
	}
	IF
}
IFNOT
THROWIFNOT 103
ACCEPT
; expValue
; end expValue
;; push identifier root_public_key_
PUSH S1
; colValue
SETGLOB 16
; end colValue
; expValue
; end expValue
;; push identifier root_owner_address_
DUP
; colValue
SETGLOB 17
; end colValue
; expValue
; end expValue
PUSHINT 0
; colValue
SETGLOB 15
; end colValue
; expValue
; end expValue
FALSE
; colValue
SETGLOB 19
; end colValue
;; get member balance
GETPARAM 7
INDEX 0
; expValue
; end expValue
; colValue
SETGLOB 18
; end colValue
; end constructor RootTokenContract
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getVersion
DROP
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getVersion
;; return
PUSHINT 4
; end function getVersion
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xada94d2f
	PUSH S1
	STUR 32
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 32
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getDetails
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getDetails
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier name
GETGLOB 11
;; push identifier symbol
GETGLOB 12
;; push identifier decimals
GETGLOB 13
;; push identifier root_public_key
GETGLOB 16
;; push identifier root_owner_address
GETGLOB 17
;; push identifier total_supply
GETGLOB 15
TUPLE 6
; end function getDetails
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST xfff7a47c
	PUSH S2
	UNTUPLE 6
	BLKSWAP 1, 6
	PUSH S6
	STREFR
	PUSH S5
	STREFR
	PUSH S4
	STUR 8
	PUSH S3
	STUR 256
	PUSH S2
	STSLICER
	PUSH S1
	STUR 128
	BLKDROP2 6, 1
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S2
	UNTUPLE 6
	BLKSWAP 1, 6
	PUSH S6
	STREFR
	PUSH S5
	STREFR
	PUSH S4
	STUR 8
	PUSH S3
	STUR 256
	PUSH S2
	STSLICER
	PUSH S1
	STUR 128
	BLKDROP2 6, 1
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getTotalSupply
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getTotalSupply
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier total_supply
GETGLOB 15
; end function getTotalSupply
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xb31f51a4
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STUR 128
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getWalletCode
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
ENDS
; function getWalletCode
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier wallet_code
GETGLOB 14
; end function getWalletCode
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x817c3359
	PUSH S1
	STREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getWalletAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
; Decode input parameters
; Decode wallet_public_key_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: wallet_public_key_
;; param: owner_address_
; function getWalletAddress
;; get member value
;; push identifier owner_address_
DUP
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier wallet_public_key_
	PUSH S1
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier owner_address_
	DUP
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier wallet_public_key_
		PUSH S1
		NEQINT 0
	}
	IF
}
IFNOT
THROWIFNOT 103
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
FALSE
SETINDEXQ 1
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier wallet_public_key_
PUSH S1
;; push identifier owner_address_
PUSH S1
;; param: wallet_public_key_
;; param: owner_address_
; function getExpectedWalletAddress
NEWDICT
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier wallet_code
GETGLOB 14
PUSHINT 2
ROT
PUSHINT 64
DICTUSETREF
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 3
ROT
PUSHINT 64
DICTUSETB
;; push identifier owner_address_
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier wallet_code
GETGLOB 14
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function getExpectedWalletAddress
BLKDROP2 2, 1
; end function getWalletAddress
BLKDROP2 2, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x869a08f8
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 104
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	GETGLOB 4
	INDEX 5
	STUR 32
	PUSH S1
	STSLICER
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
DROP
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro sendExpectedWalletAddress
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode wallet_public_key_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: wallet_public_key_
;; param: owner_address_
;; param: to
; function sendExpectedWalletAddress
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; push identifier wallet_public_key_
PUSH S2
;; push identifier owner_address_
PUSH S2
;; param: wallet_public_key_
;; param: owner_address_
; function getExpectedWalletAddress
NEWDICT
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier wallet_code
GETGLOB 14
PUSHINT 2
ROT
PUSHINT 64
DICTUSETREF
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 3
ROT
PUSHINT 64
DICTUSETB
;; push identifier owner_address_
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier wallet_code
GETGLOB 14
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function getExpectedWalletAddress
BLKDROP2 2, 1
;; decl: wallet
;; Remote call IExpectedWalletAddressCallback.expectedWalletAddressCallback
;; push identifier to
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x1173795c
;; wallet
;; push identifier wallet
PUSH S2
STSLICER
;; wallet_public_key
;; push identifier wallet_public_key_
PUSH S5
STUR 256
;; owner_address
;; push identifier owner_address_
PUSH S4
STSLICER
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP
; end function sendExpectedWalletAddress
BLKDROP 3
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro deployWallet
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode tokens
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode deploy_grams
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode wallet_public_key_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode gas_back_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: tokens
;; param: deploy_grams
;; param: wallet_public_key_
;; param: owner_address_
;; param: gas_back_address
;; ret param: retParam@0
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; modifier onlyOwner
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier root_owner_address
	GETGLOB 17
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier root_public_key
	GETGLOB 16
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier root_public_key
		GETGLOB 16
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWIFNOT 100
; function deployWallet
;; push identifier tokens
PUSH S5
;; >=
PUSHINT 0
GEQ
THROWIFNOT 100
;; get member value
;; push identifier owner_address_
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier wallet_public_key_
	PUSH S3
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier owner_address_
	PUSH S2
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier wallet_public_key_
		PUSH S3
		NEQINT 0
	}
	IF
}
IFNOT
THROWIFNOT 103
;; if
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
EQINT 0
PUSHCONT {
	ACCEPT
}
PUSHCONT {
	;; push identifier start_gas_balance
	GETGLOB 18
	;; get member balance
	GETPARAM 7
	INDEX 0
	;; -
	;; get member value
	CALLREF {
		CALL $message_balance_macro$
	}
	SUB
	UFITS 128
	MAX
	PUSHINT 2
	RAWRESERVE
}
IFELSE
;; end if
NEWDICT
;; push identifier wallet_public_key_
PUSH S4
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier wallet_code
GETGLOB 14
PUSHINT 2
ROT
PUSHINT 64
DICTUSETREF
;; push identifier wallet_public_key_
PUSH S4
NEWC
STU 256
PUSHINT 3
ROT
PUSHINT 64
DICTUSETB
;; push identifier owner_address_
PUSH S3
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier wallet_code
GETGLOB 14
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; decl: wallet
;; if
;; push identifier deploy_grams
PUSH S6
GTINT 0
PUSHCONT {
	;; push identifier stateInit
	PUSH S1
	DUP
	HASHCU
	;; get member wid
	MYADDR
	PARSEMSGADDR
	INDEX 2
	NEWC
	STSLICECONST x9_
	STI 8
	STU 256
	ENDC
	CTOS
	;; push identifier deploy_grams
	PUSH S8
	PUSH S1
	NEWC
	STSLICECONST x62_
	STSLICE
	SWAP
	STGRAMS
	PUSHINT 105
	STZEROES
	STSLICECONST xc_
	STSLICECONST 1
	PUSH S2
	STREFR
	STSLICECONST 0
	STSLICECONST x68b55f3f
	ENDC
	PUSHINT 1
	SENDRAWMSG
	NIP
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
PUSHCONT {
	;; push identifier stateInit
	PUSH S1
	HASHCU
	NEWC
	STSLICECONST x801_
	STU 256
	; expValue
	; end expValue
	; colValue
	ENDC
	CTOS
	NIP
	; end colValue
}
IFELSE
;; end if
;; Remote call ITONTokenWallet.accept
;; push identifier wallet
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0b3fcf57
;; tokens
;; push identifier tokens
PUSH S8
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; push identifier tokens
PUSH S7
; expValue
;; fetch total_supply
GETGLOB 15
; end expValue
SWAP
ADD
UFITS 128
; colValue
SETGLOB 15
; end colValue
;; if
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
PUSHCONT {
	;; if
	;; get member value
	;; push identifier gas_back_address
	PUSH S3
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	NEQINT 0
	PUSHCONT {
		;; transfer()
		;; push identifier gas_back_address
		PUSH S3
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 0
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	PUSHCONT {
		;; transfer()
		;; get member sender
		GETGLOB 9
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 109
		STZEROES
		STSLICECONST 0
		STSLICECONST 0
		ENDC
		PUSHINT 128
		SENDRAWMSG
	}
	IFELSE
	;; end if
}
IF
;; end if
;; return
;; push identifier wallet
DUP
BLKDROP2 1, 3
ROTREV
DROP2
; end function deployWallet
; end modifier onlyOwner
BLKDROP2 5, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xe6211c6f
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro deployEmptyWallet
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode deploy_grams
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode wallet_public_key_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode gas_back_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: deploy_grams
;; param: wallet_public_key_
;; param: owner_address_
;; param: gas_back_address
; function deployEmptyWallet
;; get member value
;; push identifier owner_address_
PUSH S1
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier wallet_public_key_
	PUSH S2
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier owner_address_
	PUSH S1
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier wallet_public_key_
		PUSH S2
		NEQINT 0
	}
	IF
}
IFNOT
THROWIFNOT 103
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
NEWDICT
;; push identifier wallet_public_key_
PUSH S3
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier wallet_code
GETGLOB 14
PUSHINT 2
ROT
PUSHINT 64
DICTUSETREF
;; push identifier wallet_public_key_
PUSH S3
NEWC
STU 256
PUSHINT 3
ROT
PUSHINT 64
DICTUSETB
;; push identifier owner_address_
PUSH S2
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier wallet_code
GETGLOB 14
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
;; push identifier deploy_grams
PUSH S5
PUSH S1
NEWC
STSLICECONST x62_
STSLICE
SWAP
STGRAMS
PUSHINT 105
STZEROES
STSLICECONST xc_
STSLICECONST 1
PUSH S2
STREFR
STSLICECONST 0
STSLICECONST x68b55f3f
ENDC
PUSHINT 1
SENDRAWMSG
NIP
;; decl: wallet
;; if
;; get member value
;; push identifier gas_back_address
PUSH S1
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
PUSHCONT {
	;; transfer()
	;; push identifier gas_back_address
	PUSH S1
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
PUSHCONT {
	;; transfer()
	;; get member sender
	GETGLOB 9
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
IFELSE
;; end if
;; return
;; push identifier wallet
DUP
NIP
; end function deployEmptyWallet
BLKDROP2 4, 1
;; emitting 1 value(s)
PUSH S1
EQINT -1
PUSHCONT {
	PUSH S3
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 96
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xd42b1672
	PUSH S1
	STSLICER
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro mint
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode tokens
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: tokens
;; param: to
; modifier onlyOwner
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier root_owner_address
	GETGLOB 17
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier root_public_key
	GETGLOB 16
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier root_public_key
		GETGLOB 16
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWIFNOT 100
; function mint
ACCEPT
;; Remote call ITONTokenWallet.accept
;; push identifier to
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHSLICE x3989680000000000000000000000000004_
STSLICER
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0b3fcf57
;; tokens
;; push identifier tokens
PUSH S2
STUR 128
ENDC
PUSHINT 0
SENDRAWMSG
;; push identifier tokens
PUSH S1
; expValue
;; fetch total_supply
GETGLOB 15
; end expValue
SWAP
ADD
UFITS 128
; colValue
SETGLOB 15
; end colValue
; end function mint
; end modifier onlyOwner
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro proxyBurn
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode tokens
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode sender_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode callback_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode callback_payload
;; decode TvmCell
LDREF
ENDS
;; param: tokens
;; param: sender_address
;; param: send_gas_to
;; param: callback_address
;; param: callback_payload
; modifier onlyInternalOwner
; function isInternalOwner
;; return
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier root_owner_address
	GETGLOB 17
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
THROWIFNOT 100
; function proxyBurn
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; push identifier send_gas_to
PUSH S2
;; decl: send_gas_to_
PUSHINT 0
;; push identifier sender_address
PUSH S5
;; param: wallet_public_key_
;; param: owner_address_
; function getExpectedWalletAddress
NEWDICT
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier wallet_code
GETGLOB 14
PUSHINT 2
ROT
PUSHINT 64
DICTUSETREF
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 3
ROT
PUSHINT 64
DICTUSETB
;; push identifier owner_address_
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier wallet_code
GETGLOB 14
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function getExpectedWalletAddress
BLKDROP2 2, 1
;; decl: expectedWalletAddress
;; if
;; get member value
;; push identifier send_gas_to
PUSH S4
PARSEMSGADDR
INDEX 3
PLDU 256
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier sender_address
	PUSH S5
	; colValue
	POP S2
	; end colValue
}
IFNOT
;; end if
;; Remote call IBurnableByRootTokenWallet.burnByRoot
;; push identifier expectedWalletAddress
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 1
NEWC
STSLICECONST x0c2ff20d
;; tokens
;; push identifier tokens
PUSH S8
STUR 128
;; send_gas_to
;; push identifier send_gas_to_
PUSH S3
STSLICER
;; callback_address
;; push identifier callback_address
PUSH S5
STSLICER
;; callback_payload
;; push identifier callback_payload
PUSH S4
STREFR
STBREFR
ENDC
PUSHINT 128
SENDRAWMSG
DROP2
; end function proxyBurn
; end modifier onlyInternalOwner
BLKDROP 5
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro tokensBurned
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode tokens
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
; Decode sender_public_key
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode sender_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode send_gas_to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode callback_address
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
; Decode callback_payload
;; decode TvmCell
LDREF
ENDS
;; param: tokens
;; param: sender_public_key
;; param: sender_address
;; param: send_gas_to
;; param: callback_address
;; param: callback_payload
; function tokensBurned
;; !
;; push identifier paused
GETGLOB 19
NOT
THROWIFNOT 104
;; push identifier sender_public_key
PUSH S4
;; push identifier sender_address
PUSH S4
;; param: wallet_public_key_
;; param: owner_address_
; function getExpectedWalletAddress
NEWDICT
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 0
ROT
PUSHINT 64
DICTUSETB
MYADDR
PUSHINT 1
ROT
PUSHINT 64
DICTUSET
;; push identifier wallet_code
GETGLOB 14
PUSHINT 2
ROT
PUSHINT 64
DICTUSETREF
;; push identifier wallet_public_key_
PUSH S2
NEWC
STU 256
PUSHINT 3
ROT
PUSHINT 64
DICTUSETB
;; push identifier owner_address_
PUSH S1
PUSHINT 4
ROT
PUSHINT 64
DICTUSET
NEWC
STDICT
ENDC
;; push identifier wallet_code
GETGLOB 14
NEWC
STSLICECONST x2_
STOPTREF
STOPTREF
STZERO
ENDC
;; decl: stateInit
;; return
;; push identifier stateInit
DUP
HASHCU
NEWC
STSLICECONST x801_
STU 256
ENDC
CTOS
NIP
; end function getExpectedWalletAddress
BLKDROP2 2, 1
;; decl: expectedWalletAddress
;; get member sender
GETGLOB 9
;; push identifier expectedWalletAddress
PUSH S1
SDEQ
THROWIFNOT 102
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; push identifier tokens
PUSH S6
; expValue
;; fetch total_supply
GETGLOB 15
; end expValue
SWAP
SUB
UFITS 128
; colValue
SETGLOB 15
; end colValue
;; if
;; get member value
;; push identifier callback_address
PUSH S2
PARSEMSGADDR
INDEX 3
PLDU 256
EQINT 0
PUSHCONT {
	;; transfer()
	;; push identifier send_gas_to
	PUSH S3
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 0
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
PUSHCONT {
	;; Remote call IBurnTokensCallback.burnCallback
	;; push identifier callback_address
	PUSH S2
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 109
	STZEROES
	STSLICECONST 0
	STSLICECONST 1
	NEWC
	STSLICECONST x3cc9103e
	;; tokens
	;; push identifier tokens
	PUSH S8
	STUR 128
	;; payload
	;; push identifier callback_payload
	PUSH S3
	STREFR
	;; sender_public_key
	;; push identifier sender_public_key
	PUSH S7
	STUR 256
	;; sender_address
	;; push identifier sender_address
	PUSH S6
	STSLICER
	;; wallet_address
	;; push identifier expectedWalletAddress
	PUSH S2
	STSLICER
	NEWC
	;; send_gas_to
	;; push identifier send_gas_to
	PUSH S6
	STSLICER
	STBREFR
	STBREFR
	ENDC
	PUSHINT 128
	SENDRAWMSG
}
IFELSE
;; end if
DROP
; end function tokensBurned
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro sendSurplusGas
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode to
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: to
; modifier onlyInternalOwner
; function isInternalOwner
;; return
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier root_owner_address
	GETGLOB 17
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
THROWIFNOT 100
; function sendSurplusGas
;; push identifier start_gas_balance
GETGLOB 18
PUSHINT 2
RAWRESERVE
;; Remote call IReceiveSurplusGas.receiveSurplusGas
;; push identifier to
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x0eedacfc
ENDC
PUSHINT 128
SENDRAWMSG
; end function sendSurplusGas
; end modifier onlyInternalOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro setPaused
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode value
LDI 1
ENDS
;; param: value
; modifier onlyOwner
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier root_owner_address
	GETGLOB 17
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier root_public_key
	GETGLOB 16
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier root_public_key
		GETGLOB 16
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWIFNOT 100
; function setPaused
ACCEPT
; expValue
; end expValue
;; push identifier value
DUP
; colValue
SETGLOB 19
; end colValue
; end function setPaused
; end modifier onlyOwner
DROP
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro sendPausedCallbackTo
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode callback_id
LDU 64
; Decode callback_addr
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: callback_id
;; param: callback_addr
; function sendPausedCallbackTo
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; get member value
CALLREF {
	CALL $message_balance_macro$
}
SUB
UFITS 128
PUSHINT 2
RAWRESERVE
;; Remote call IPausedCallback.pausedCallback
;; push identifier callback_addr
DUP
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 109
STZEROES
STSLICECONST 0
STSLICECONST 0
STSLICECONST x7386f0e8
;; callback_id
;; push identifier callback_id
PUSH S2
STUR 64
;; value
;; push identifier paused
GETGLOB 19
STIR 1
ENDC
PUSHINT 128
SENDRAWMSG
; end function sendPausedCallbackTo
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro transferOwner
DROP
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; Decode input parameters
; Decode root_public_key_
LDUQ 256
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 256
}
IFNOT
; Decode root_owner_address_
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: root_public_key_
;; param: root_owner_address_
; modifier onlyOwner
; function isOwner
;; return
; function isInternalOwner
;; return
;; get member value
;; push identifier root_owner_address
GETGLOB 17
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; push identifier root_owner_address
	GETGLOB 17
	;; get member sender
	GETGLOB 9
	SDEQ
}
IF
; end function isInternalOwner
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	; function isExternalOwner
	;; return
	;; push identifier root_public_key
	GETGLOB 16
	NEQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier root_public_key
		GETGLOB 16
		;; ==
		GETGLOB 5
		DUP
		ISNULL
		PUSHCONT {
			DROP
			PUSHINT 0
		}
		IF
		EQUAL
	}
	IF
	; end function isExternalOwner
}
IFNOT
; end function isOwner
THROWIFNOT 100
; function transferOwner
;; push identifier root_public_key_
PUSH S1
NEQINT 0
;; short-circuiting &&
DUP
PUSHCONT {
	DROP
	;; get member value
	;; push identifier root_owner_address_
	DUP
	PARSEMSGADDR
	INDEX 3
	PLDU 256
	EQINT 0
}
IF
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier root_public_key_
	PUSH S1
	EQINT 0
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; get member value
		;; push identifier root_owner_address_
		DUP
		PARSEMSGADDR
		INDEX 3
		PLDU 256
		NEQINT 0
	}
	IF
}
IFNOT
THROWIFNOT 103
ACCEPT
; expValue
; end expValue
;; push identifier root_public_key_
PUSH S1
; colValue
SETGLOB 16
; end colValue
; expValue
; end expValue
;; push identifier root_owner_address_
DUP
; colValue
SETGLOB 17
; end colValue
; end function transferOwner
; end modifier onlyOwner
DROP2
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro on_bounce_macro
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
;; param: slice
; function onBounce
ACCEPT
; expValue
DUP
; end expValue
LDU 32
; colValue
POP S2
; end colValue
;; decl: functionId
;; if
;; push identifier functionId
DUP
;; ==
PUSHINT 188731223
EQUAL
PUSHCONT {
	; expValue
	PUSH S1
	; end expValue
	LDU 128
	; colValue
	POP S3
	; end colValue
	;; decl: latest_bounced_tokens
	;; push identifier latest_bounced_tokens
	DUP
	; expValue
	;; fetch total_supply
	GETGLOB 15
	; end expValue
	SWAP
	SUB
	UFITS 128
	; colValue
	SETGLOB 15
	; end colValue
	DROP
}
IF
;; end if
DROP
; end function onBounce
DROP
CALLREF {
	CALL $c7_to_c4$
}

.macro fallback_macro
GETGLOB 1
ISNULL
IFREF {
	CALL $c4_to_c7$
}
; function fallback
; end function fallback
CALLREF {
	CALL $c7_to_c4$
}

.macro c7_to_c4
GETGLOB 2
NEWC
STU 256
GETGLOB 3
STUR 64
GETGLOB 6
STUR 1
NEWC
GETGLOB 17
GETGLOB 18
XCHG s2
STSLICE
STU 128
GETGLOB 10
GETGLOB 11
GETGLOB 12
GETGLOB 13
GETGLOB 14
GETGLOB 15
GETGLOB 16
GETGLOB 19
REVERSE 10, 0
STBREF
STU 256
STREF
STREF
STU 8
STREF
STU 128
STU 256
STI 1
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS        ; c4
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDU 1       ; pubkey [timestamp] constructor_flag memory
LDREFRTOS
LDMSGADDR
PLDU 128
SETGLOB 18
SETGLOB 17
LDU 256
LDREF
LDREF
LDU 8
LDREF
LDU 128
LDU 256
PLDI 1
SETGLOB 19
SETGLOB 16
SETGLOB 15
SETGLOB 14
SETGLOB 13
SETGLOB 12
SETGLOB 11
SETGLOB 10
TRUE
SETGLOB 1   ; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; D
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS        ; c4
DUP        ; c4 c4
SBITS      ; c4 bits
GTINT 1    ; c4 bits>1
PUSHCONT {
	LDU 256      ; pubkey c4
	LDU 64      ; pubkey timestamp c4
	LDU 1       ; pubkey [timestamp] constructor_flag memory
	LDREFRTOS
	LDMSGADDR
	PLDU 128
	SETGLOB 18
	SETGLOB 17
	LDU 256
	LDREF
	LDREF
	LDU 8
	LDREF
	LDU 128
	LDU 256
	PLDI 1
	SETGLOB 19
	SETGLOB 16
	SETGLOB 15
	SETGLOB 14
	SETGLOB 13
	SETGLOB 12
	SETGLOB 11
	SETGLOB 10
	TRUE
	SETGLOB 1   ; pubkey [timestamp] constructor_flag
	SETGLOB 6   ; pubkey [timestamp]
	SETGLOB 3   ; D
	SETGLOB 2
}
PUSHCONT {
	PLDDICT   ; D
	; init _randomNonce
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 256
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 10
	; init name
	PUSHINT 2
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		NEWC
		ENDC
	}
	IFNOT
	SETGLOB 11
	; init symbol
	PUSHINT 3
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		NEWC
		ENDC
	}
	IFNOT
	SETGLOB 12
	; init decimals
	PUSHINT 4
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PLDU 8
	}
	PUSHCONT {
		PUSHINT 0
	}
	IFELSE
	SETGLOB 13
	; init wallet_code
	PUSHINT 5
	PUSH S1
	PUSHINT 64
	DICTUGETREF
	PUSHCONT {
		NEWC
		ENDC
	}
	IFNOT
	SETGLOB 14
	; init total_supply
	PUSHINT 0
	SETGLOB 15
	; init root_public_key
	PUSHINT 0
	SETGLOB 16
	; init root_owner_address
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 17
	; init start_gas_balance
	PUSHINT 0
	SETGLOB 18
	; init paused
	PUSHINT 0
	SETGLOB 19
	; set contract pubkey
	PUSHINT 0
	SWAP
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
	TRUE
	SETGLOB 1
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
PUSHINT 0  ; main_external trans id
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
PUSHCONT {
	PUSH S1
	LDSLICE 32
	NIP
	CALL $on_bounce_macro$
}
IFJMP
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDU 32  ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.internal-alias :main_external, -1
.internal :main_external
PUSHINT -1 ; main_external trans id
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice
	LDU 1 ; signatureSlice hashMsgSlice havePubkey msgSlice
	SWAP  ; signatureSlice hashMsgSlice msgSlice havePubkey
	PUSHCONT {
		LDU 256       ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG s3
		SWAP
	}
	PUSHCONT {
		XCHG s2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
PUSHCONT {
	LDU 1      ; havePubkey msgSlice
	SWAP       ; msgSlice havePubkey
	THROWIF 58 ; msgSlice
}
IFELSE
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
PUSHCONT {
	DROP2 ; funcId and restSlice
	CALLREF {
		CALL $fallback_macro$
	}
}
IF

.macro name
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 11
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf985b3f4
	PUSH S1
	STREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro symbol
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 12
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xc5b3bdfd
	PUSH S1
	STREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro decimals
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 13
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST x95005b07
	PUSH S1
	STUR 8
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro start_gas_balance
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 18
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xf26e937f
	PUSH S1
	STUR 128
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro paused
DROP
ENDS
CALLREF {
	CALL $c4_to_c7$
}
;; emitting 1 value
DUP
EQINT -1
PUSHCONT {
	GETGLOB 19
	NEWC
	PUSHSLICE xc0000000000000000000000002_
	STSLICER
	STSLICECONST 0
	STSLICECONST 0
	STSLICECONST xb08d66d1
	PUSH S1
	STIR 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
IF
DROP
TRUE
SETGLOB 7

.macro public_function_selector
DUP
PUSHINT 352344839
LEQ
PUSHCONT {
	DUP
	PUSHINT 30752029
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 24916825
		EQUAL
		IFJMPREF {
			CALL $getWalletCode$
		}
		DUP
		PUSHINT 30752029
		EQUAL
		IFJMPREF {
			CALL $constructor$
		}
	}
	IFJMP
	DUP
	PUSHINT 110758136
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 32840294
		EQUAL
		IFJMPREF {
			CALL $sendPausedCallbackTo$
		}
		DUP
		PUSHINT 110758136
		EQUAL
		IFJMPREF {
			CALL $getWalletAddress$
		}
	}
	IFJMP
	DUP
	PUSHINT 352344839
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 224066674
		EQUAL
		IFJMPREF {
			CALL $setPaused$
		}
		DUP
		PUSHINT 352344839
		EQUAL
		IFJMPREF {
			CALL $decimals$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 857690532
LEQ
PUSHCONT {
	DUP
	PUSHINT 552322925
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 502818985
		EQUAL
		IFJMPREF {
			CALL $proxyBurn$
		}
		DUP
		PUSHINT 552322925
		EQUAL
		IFJMPREF {
			CALL $sendSurplusGas$
		}
	}
	IFJMP
	DUP
	PUSHINT 774408362
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 766070063
		EQUAL
		IFJMPREF {
			CALL $getVersion$
		}
		DUP
		PUSHINT 774408362
		EQUAL
		IFJMPREF {
			CALL $tokensBurned$
		}
	}
	IFJMP
	DUP
	PUSHINT 857690532
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 814573265
		EQUAL
		IFJMPREF {
			CALL $paused$
		}
		DUP
		PUSHINT 857690532
		EQUAL
		IFJMPREF {
			CALL $getTotalSupply$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 1916650702
LEQ
PUSHCONT {
	DUP
	PUSHINT 1169407485
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 942155290
		EQUAL
		IFJMPREF {
			CALL $transferOwner$
		}
		DUP
		PUSHINT 1169407485
		EQUAL
		IFJMPREF {
			CALL $symbol$
		}
	}
	IFJMP
	DUP
	PUSHINT 1437837819
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1412109938
		EQUAL
		IFJMPREF {
			CALL $deployEmptyWallet$
		}
		DUP
		PUSHINT 1437837819
		EQUAL
		IFJMPREF {
			CALL $sendExpectedWalletAddress$
		}
	}
	IFJMP
	DUP
	PUSHINT 1916650702
	LEQ
	PUSHCONT {
		DUP
		PUSHINT 1713445999
		EQUAL
		IFJMPREF {
			CALL $deployWallet$
		}
		DUP
		PUSHINT 1916650702
		EQUAL
		IFJMPREF {
			CALL $mint$
		}
	}
	IFJMP
}
IFJMP
DUP
PUSHINT 2146935932
LEQ
PUSHCONT {
	DUP
	PUSHINT 1919849343
	EQUAL
	IFJMPREF {
		CALL $start_gas_balance$
	}
	DUP
	PUSHINT 2038805492
	EQUAL
	IFJMPREF {
		CALL $name$
	}
	DUP
	PUSHINT 2146935932
	EQUAL
	IFJMPREF {
		CALL $getDetails$
	}
}
IFJMP
